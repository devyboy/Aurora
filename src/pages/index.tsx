import { type ChangeEvent, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { SignInButton, useUser } from "@clerk/nextjs";
import { type RouterOutputs, api } from "~/utils/api";
import { LoadingPage } from "~/components/loading";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { Progress } from "antd";
import Link from "next/link";

const MAX_POST_LENGTH = 200;
dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const apiCtx = api.useContext();
  const [input, setInput] = useState<string>("");
  const { mutate: createPost, isLoading } = api.posts.createPost.useMutation({
    onSuccess: () => {
      setInput("");
      void apiCtx.posts.getAll.invalidate();
    },
  });

  const { user } = useUser();
  if (!user) return null;

  const handleInputChange = (e: ChangeEvent<HTMLTextAreaElement>) => {
    setInput(e.target.value);
  };

  const percentage = Math.floor((input.length / MAX_POST_LENGTH) * 100);

  return (
    <div>
      <div className="flex w-full justify-center gap-3">
        <Image
          width={44}
          height={44}
          src={user.profileImageUrl}
          alt="profile picture"
          className="rounded-full"
          priority
        />
        <textarea
          placeholder="Type something..."
          className="grow resize-none overflow-visible bg-transparent outline-none"
          value={input}
          onChange={handleInputChange}
          maxLength={MAX_POST_LENGTH}
        />
        <Progress
          className="self-center"
          type="circle"
          showInfo={false}
          strokeColor={percentage < 100 ? "rgb(29, 155, 240)" : "red"}
          trailColor="rgb(47, 51, 54)"
          strokeWidth={7}
          size={30}
          percent={percentage}
        />
        <button
          className="h-9 self-center rounded-lg bg-sky-500 px-5 text-base hover:bg-sky-600"
          onClick={() => createPost({ content: input })}
          disabled={isLoading}
        >
          Post
        </button>
      </div>
    </div>
  );
};

type PostType = RouterOutputs["posts"]["getAll"][number];

const PostItem = (props: { data: PostType }) => {
  const {
    data: { post, author },
  } = props;

  if (!author) {
    return null;
  }

  const createdAt = dayjs(post.createdAt).fromNow();
  const postPath = `/${author.id}/${post.id}`;
  const authorPath = `/${author.id}`;

  return (
    <Link href={postPath} className="flex gap-3 border-b border-gray-700 p-4">
      <Link href={authorPath}>
        <Image
          src={author.profileImageUrl}
          alt={`${author.username}'s profile picture`}
          height={44}
          width={44}
          className="rounded-full"
        />
      </Link>
      <div>
        <div className="flex gap-1">
          <Link href={authorPath}>
            <strong>{author.firstName}</strong>{" "}
          </Link>
          <span className="text-slate-500">
            @{author.username} &bull; {createdAt}
          </span>
        </div>
        <div>{post.content}</div>
        <div></div>
      </div>
    </Link>
  );
};

const Feed = () => {
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (isLoading) {
    return <LoadingPage />;
  }

  if (!data) {
    return <div>Something went wrong...</div>;
  }

  return (
    <div className="flex flex-col ">
      {data.map((data) => (
        <PostItem key={data.post.id} data={data} />
      ))}
      <div className="flex justify-center py-6 align-middle text-slate-500">
        <p>That&apos;s the end!</p>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded, isSignedIn } = useUser();
  api.posts.getAll.useQuery();

  if (!isLoaded) {
    return <LoadingPage />;
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-full justify-center">
        <div className="h-full w-full border border-gray-700 md:max-w-2xl">
          <div className="border-b border-gray-700 p-4">
            {!isSignedIn && <SignInButton />}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
